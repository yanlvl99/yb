{"version":3,"sources":["../../src/services/utils.ts","../../src/helpers/combineUrl.ts","../../src/helpers/errorHandler.ts","../../src/services/engine.ts"],"names":[],"mappings":"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","file":"engine.mjs","sourcesContent":["/**\n * @file Utility functions for handling HTTP responses and system information.\n */\n\nimport { IncomingMessage } from 'http';\nimport os from 'os';\n\n/**\n * Checks if the socket used for the response was reused.\n * \n * @param res - The HTTP response object.\n * @returns A boolean indicating if the socket was reused, or undefined if the information is not available.\n */\nexport function getReusedSocket(res: any): boolean | undefined {\n    return res?.reusedSocket;\n};\n\n/**\n * Retrieves the IP address of the server from the HTTP response.\n * \n * @param res - The HTTP response object.\n * @returns The server's IP address as a string, or undefined if the information is not available.\n */\nexport function getServerIp(res: IncomingMessage): string | undefined {\n    const socket = res?.socket || res?.connection;\n    return socket ? socket.remoteAddress : undefined;\n}\n\n/**\n * Generates a default User-Agent string based on the current system's platform, architecture, and Node.js version.\n * \n * @returns A string representing the default User-Agent.\n */\nexport function getDefaultUserAgent(): string {\n    const platform = os.platform();\n    const arch = os.arch();\n    const nodeVersion = process.version;\n\n    return `Nyro/0.0.1 (${platform}; ${arch} ${nodeVersion})`;\n}","/**\n * Combines a base URL with a relative URL, ensuring that there is exactly one slash between them.\n *\n * @param baseUrl - The base URL to which the relative URL will be appended.\n * @param url - The relative URL to append to the base URL.\n * @returns The combined URL as a string.\n */\nfunction combineUrl(baseUrl: string, url: string): string {\n  return url\n    ? baseUrl.replace(/\\/+$/, '') + `${baseUrl ? '/' : ''}` + url.replace(/^\\/+/, '')\n    : baseUrl;\n};\n\nexport default combineUrl;","\n/**\n * Interface representing the options for handling errors.\n * \n * @interface ErrorHandlerOptions\n * \n * @property {string} message - The error message to be displayed.\n * @property {any} [requestOptions] - Optional request options associated with the error.\n * @property {number} statusCode - The HTTP status code associated with the error.\n * @property {string} name - The name of the error.\n * @property {Error} [error] - Optional original error object.\n */\ninterface ErrorHandlerOptions {\n    message: string;\n    requestOptions?: any;\n    statusCode: number;\n    name: string;\n    error?: Error;\n}\n\n\nexport default class ErrorHandler extends Error {\n    requestOptions?: any;\n    statusCode: number;\n    constructor(errorHandlerOptions: ErrorHandlerOptions) {\n        super(errorHandlerOptions.message);\n        this.name = 'NyroError';\n        this.requestOptions = errorHandlerOptions.requestOptions;\n        this.statusCode = errorHandlerOptions.statusCode;\n        this.stack = errorHandlerOptions.error?.stack;\n    }\n}","import * as http from 'http';\nimport * as https from 'https';\nimport * as zlib from 'zlib';\nimport { URL, URLSearchParams } from 'url';\nimport { getReusedSocket, getServerIp, getDefaultUserAgent } from './utils';\nimport combineURL from '../helpers/combineUrl';\nimport ErrorHandler from '../helpers/errorHandler';\nimport { HttpProxyAgent } from 'http-proxy-agent';\nimport { HttpsProxyAgent } from 'https-proxy-agent';\n\ninterface ProxyOptions {\n    host: string;\n    port: number;\n    auth?: {\n        username: string;\n        password: string;\n    };\n}\n\ninterface AuthOptions {\n    username: string;\n    password: string;\n}\n\ninterface Headers {\n    'User-Agent'?: string;\n    'Response-Type'?: string;\n    'Content-Encoding'?: string;\n    'Content-Length'?: string;\n    'Content-Range'?: string;\n    'Content-Type'?: string;\n    'Authorization'?: string;\n    'Accept'?: string;\n    'Accept-Encoding'?: string;\n    'Accept-Language'?: string;\n    'Cache-Control'?: string;\n    'Connection'?: string;\n    'Cookie'?: string;\n    'DNT'?: string;\n    'Host'?: string;\n    'Origin'?: string;\n    'Pragma'?: string;\n    'Referer'?: string;\n    'TE'?: string;\n    'Upgrade-Insecure-Requests'?: string;\n    'Via'?: string;\n    'Warning'?: string;\n    'X-Requested-With'?: string;\n    'X-Forwarded-For'?: string;\n    'X-Forwarded-Host'?: string;\n    'X-Forwarded-Proto'?: string;\n    'Front-End-Https'?: string;\n    'X-Http-Method-Override'?: string;\n    'X-ATT-DeviceId'?: string;\n    'X-Wap-Profile'?: string;\n    'Proxy-Connection'?: string;\n    'X-UIDH'?: string;\n    'X-Csrf-Token'?: string;\n    'X-Request-ID'?: string;\n    'X-Correlation-ID'?: string;\n    'X-DeviceUserAgent'?: string;\n    'X-Device-ID'?: string;\n    'X-Device-OS'?: string;\n    'X-Device-OS-Version'?: string;\n    'X-Device-Model'?: string;\n    'X-Device-Brand'?: string;\n    'X-Device-Name'?: string;\n    'X-Device-Carrier'?: string;\n    'X-Device-Country'?: string;\n    'X-Device-Locale'?: string;\n    'X-Device-App'?: string;\n    'X-Device-App-Version'?: string;\n    'X-Device-App-Name'?: string;\n    'X-Device-App-Installer'?: string;\n    'X-Device-App-Install-Time'?: string;\n    'X-Device-App-Update-Time'?: string;\n    'X-Device-App-Store'?: string;\n    'X-Device-App-Store-Version'?: string;\n    'X-Device-App-Store-Name'?: string;\n}\n\ntype InferBodySchema<T> = T extends Record<string, infer U> ? { [K in keyof T]: T[K] extends NumberConstructor ? number : T[K] extends StringConstructor ? string : any } : any;\n\ninterface RequestOptions<B = any> {\n    method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS' | 'CONNECT' | 'TRACE';\n    url: string;\n    path?: string;\n    headers?: Headers;\n    body?: any;\n    timeout?: number;\n    params?: Record<string, string>;\n    baseURL?: string;\n    query?: Record<string, string | number | boolean>;\n    responseType?: ('json' | 'text' | 'blob' | 'stream' | 'arrayBuffer' | 'document' & string);\n    responseEncoding?: BufferEncoding;\n    timeoutErrorMessage?: string;\n    validateStatus?: (status: number) => boolean;\n    decompress?: boolean;\n    proxy?: ProxyOptions;\n    maxRedirects?: number;\n    auth?: AuthOptions;\n    maxBodyLength?: number;\n    maxContentLength?: number;\n    maxRate?: number;\n    signal?: AbortSignal;\n    bodySchema?: B;\n}\n\ninterface RequestInfo {\n    method: string;\n    url: string;\n    fullUrl: string;\n    headers: Headers;\n    body?: BodyFromSchema<any>;\n    httpVersion?: string;\n    startTimestamp: number;\n    timeout?: number;\n    contentLength?: number;\n}\n\ntype BodyFromSchema<B> = \n  B extends typeof Number ? number :\n  B extends typeof String ? string :\n  B extends Record<string, infer T> ? \n  { [K in keyof B]: B[K] extends typeof Number ? number : B[K] extends typeof String ? string : T }:\n  B extends typeof Number[] ? number[] : \n  B extends typeof String[] ? string[] : \n  B extends typeof Array ? any[] :\n  B;\n\ninterface HttpResponse<T, B = any> {\n    body: BodyFromSchema<B>;\n    statusCode: number;\n    statusText: string;\n    headers: Headers;\n    config: RequestOptions<B>;\n    request: http.ClientRequest;\n    requestInfo: RequestInfo;\n    response: http.IncomingMessage;\n    timestamp: {\n        startTimestamp: number;\n        endTimestamp: number;\n    };\n    responseTime: number;\n    responseSize: number;\n    serverIp?: string;\n    connectionReused: boolean;\n}\n\n\n/**\n* Core function for handling HTTP requests.\n* \n* @param options - The request options.\n* @param currentRedirects - The number of redirects that have occurred.\n* @returns A promise that resolves with the HTTP response.\n*/\nasync function Core<T, B>(options: RequestOptions<B>, currentRedirects = 0): Promise<HttpResponse<T, BodyFromSchema<B>>> {\n    const combinedURL = combineURL(options.baseURL || '', options.url || options.path || '');\n    const fullUrl = new URL(combinedURL);\n\n    if (options.path) {\n        fullUrl.pathname += options.path;\n    }\n\n    if (options.params) {\n        const params = new URLSearchParams(options.params);\n        fullUrl.search = params.toString();\n    }\n\n    if(['json', 'text', 'blob', 'stream', 'arrayBuffer', 'document'].indexOf(options.responseType || 'json') === -1) {\n        return Promise.reject(new ErrorHandler({\n            statusCode: 400,\n            message: `Invalid response type: ${options.responseType}`,\n            name: 'Request',\n            requestOptions: options,\n        }));\n    };\n\n    if(['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'HEAD', 'OPTIONS', 'CONNECT', 'TRACE'].indexOf(options.method) === -1) {\n        return Promise.reject(new ErrorHandler({\n            statusCode: 400,\n            message: `Invalid request method: ${options.method}`,\n            name: 'Request',\n            requestOptions: options,\n        }));\n    };\n\n    if (options.query) {\n        const query = new URLSearchParams();\n        for (const key in options.query) {\n            if (Object.prototype.hasOwnProperty.call(options.query, key)) {\n                query.append(key, String(options.query[key]));\n            }\n        }\n        fullUrl.search += (fullUrl.search ? '&' : '') + query.toString();\n    }\n\n    const isHttps = fullUrl.protocol === 'https:';\n    const lib = isHttps ? https : http;\n\n    if(options.headers) {\n    if (!options.headers['User-Agent']) options.headers['User-Agent'] = getDefaultUserAgent();\n    if (!options.headers['Content-Type']) options.headers['Content-Type'] = 'application/json';\n    }\n\n    if (!options.responseType) {\n        options.responseType = 'json';\n    }\n\n    if (options.auth && options.headers) {\n        const { username, password } = options.auth;\n        const token = Buffer.from(`${username}:${password}`).toString('base64');\n        options.headers['Authorization'] = `Basic ${token}`;\n    }\n\n    const requestOptions: http.RequestOptions = {\n        method: options.method,\n        headers: options.headers as http.OutgoingHttpHeaders,\n    };\n\n    if (options.proxy) {\n        const proxyAuth = options.proxy.auth ? `${options.proxy.auth.username}:${options.proxy.auth.password}` : '';\n        const proxyUrl = `${options.proxy.host}:${options.proxy.port}`;\n\n        requestOptions.agent = isHttps\n            ? new HttpsProxyAgent(`http://${proxyAuth ? `${proxyAuth}@` : ''}${proxyUrl}`)\n            : new HttpProxyAgent(`http://${proxyAuth ? `${proxyAuth}@` : ''}${proxyUrl}`);\n    }\n\n    const dataString = options.body ? JSON.stringify(options.body) : null;\n    if (dataString) {\n        if (options.maxBodyLength && Buffer.byteLength(dataString) > options.maxBodyLength) {\n            return Promise.reject(new ErrorHandler({\n                statusCode: 413,\n                message: `Request body size exceeds maxBodyLength of ${options.maxBodyLength} bytes`,\n                name: 'Request',\n                requestOptions: options\n            }));\n        }\n        requestOptions.headers!['Content-Length'] = Buffer.byteLength(dataString).toString();\n    }\n\n    const startTimestamp = Date.now();\n\n    return new Promise((resolve, reject) => {\n        const req = lib.request(fullUrl, requestOptions, (res) => {\n            const chunks: any[] = [];\n            let totalLength = 0;\n            let responseSize = 0;\n            let lastTimestamp = startTimestamp;\n            const connectionReused = getReusedSocket(res);\n            const serverIp = getServerIp(res);\n\n            res.on('data', (chunk) => {\n                totalLength += chunk.length;\n                responseSize += chunk.length;\n\n                const currentTimestamp = Date.now();\n                const timeElapsed = (currentTimestamp - lastTimestamp) / 1000;\n                lastTimestamp = currentTimestamp;\n\n                const rate = chunk.length / timeElapsed;\n\n                if (options.maxContentLength && responseSize > options.maxContentLength) {\n                    req.destroy();\n                    reject(new ErrorHandler({\n                        statusCode: 413,\n                        message: `Response size exceeds maxContentLength of ${options.maxContentLength} bytes`,\n                        name: 'Request',\n                        requestOptions: options,\n                    }));\n                    return;\n                }\n\n                if (options.maxRate && rate > options.maxRate) {\n                    res.pause();\n\n                    setTimeout(() => {\n                        res.resume();\n                    }, (chunk.length / options.maxRate) * 1000);\n                }\n\n                chunks.push(chunk);\n            });\n\n            res.on('end', () => {\n                const endTime = Date.now();\n                const responseTime = endTime - startTimestamp;\n                let rawData = Buffer.concat(chunks);\n\n                if (options.decompress !== false) {\n                    const encoding = res.headers['content-encoding'];\n                    if (encoding === 'gzip') {\n                        rawData = zlib.gunzipSync(rawData);\n                    } else if (encoding === 'deflate') {\n                        rawData = zlib.inflateSync(rawData);\n                    } else if (encoding === 'br') {\n                        rawData = zlib.brotliDecompressSync(rawData);\n                    }\n                }\n\n                const validateStatus = options.validateStatus || ((status) => status >= 200 && status < 300);\n\n                if (res.statusCode && res.statusCode >= 300 && res.statusCode < 400 && res.headers.location && currentRedirects < (options.maxRedirects || 5)) {\n                    const newUrl = new URL(res.headers.location, fullUrl);\n                    options.url = newUrl.href;\n                    resolve(Core<T,B>(options, currentRedirects + 1));\n                    return;\n                }\n\n                let responseData: any;\n                if (options.responseType === 'json') {\n                    try {\n                        responseData = JSON.parse(rawData.toString(options.responseEncoding || 'utf8'));\n                    } catch (e) {\n                        responseData = rawData.toString(options.responseEncoding || 'utf8');\n                    }\n                } else if (options.responseType === 'text') {\n                    responseData = rawData.toString(options.responseEncoding || 'utf8');\n                } else if (options.responseType === 'blob') {\n                    responseData = rawData;\n                } else if (options.responseType === 'stream') {\n                    responseData = res;\n                } else if (options.responseType === 'arrayBuffer') {\n                    responseData = Buffer.from(rawData);\n                } else if (options.responseType === 'document') {\n                    responseData = rawData.toString(options.responseEncoding || 'utf8');\n                }\n\n                if (!validateStatus(res.statusCode || 0)) {\n                    reject(new ErrorHandler({\n                        statusCode: res.statusCode || 0,\n                        message: `Request failed with status code ${res.statusCode}`,\n                        name: 'Request',\n                        requestOptions: options,\n                    }));\n                    return;\n                }\n\n                const response: HttpResponse<T, BodyFromSchema<B>> = {\n                    request: req,\n                    response: res,\n                    headers: res.headers as Record<string, string | string[]>,\n                    config: options as RequestOptions<BodyFromSchema<B>>,\n                    requestInfo: {\n                        method: options.method,\n                        url: options.url,\n                        fullUrl: fullUrl.href,\n                        headers: options.headers || {},\n                        body: options.body,\n                        httpVersion: res.httpVersion,\n                        startTimestamp,\n                        timeout: options.timeout,\n                        contentLength: dataString ? Buffer.byteLength(dataString) : 0,\n                    },\n                    body: responseData,\n                    statusCode: res.statusCode!,\n                    statusText: res.statusMessage || '',\n                    timestamp: {\n                        startTimestamp,\n                        endTimestamp: endTime,\n                    },\n                    responseTime,\n                    responseSize,\n                    serverIp,\n                    connectionReused: connectionReused || false,\n                };\n\n                resolve(response);\n            });\n        });\n\n        req.on('error', (err) => {\n            reject(new ErrorHandler({\n                statusCode: 500,\n                message: err.message,\n                name: 'Request',\n                requestOptions: options,\n            }));\n        });\n\n        if (options.signal) {\n            options.signal.addEventListener('abort', () => {\n                req.destroy();\n                reject(new ErrorHandler({\n                    statusCode: 499,\n                    message: 'Request cancelled',\n                    name: 'Request',\n                    requestOptions: options,\n                }));\n            });\n        }\n\n        req.setTimeout(options.timeout || 0, () => {\n            req.destroy();\n            reject(new ErrorHandler({\n                statusCode: 408,\n                message: options.timeoutErrorMessage || 'Timeout exceeded',\n                name: 'Request',\n                requestOptions: options,\n            }));\n        });\n\n        if (dataString) {\n            req.write(dataString);\n        }\n\n        req.end();\n    });\n}\n\nexport default Core;\n"]}