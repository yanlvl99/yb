{"version":3,"sources":["../../src/services/utils.ts"],"names":[],"mappings":";;;;;AAaO,SAAS,gBAAgB,GAA+B,EAAA;AAC3D,EAAA,OAAO,GAAK,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,YAAA,CAAA;AAChB,CAAA;AAFgB,MAAA,CAAA,eAAA,EAAA,iBAAA,CAAA,CAAA;AAUT,SAAS,YAAY,GAA0C,EAAA;AAClE,EAAM,MAAA,MAAA,GAAA,CAAS,GAAK,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,MAAA,MAAU,GAAK,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,UAAA,CAAA,CAAA;AACnC,EAAO,OAAA,MAAA,GAAS,OAAO,aAAgB,GAAA,KAAA,CAAA,CAAA;AAC3C,CAAA;AAHgB,MAAA,CAAA,WAAA,EAAA,aAAA,CAAA,CAAA;AAUT,SAAS,mBAA8B,GAAA;AAC1C,EAAM,MAAA,QAAA,GAAW,GAAG,QAAS,EAAA,CAAA;AAC7B,EAAM,MAAA,IAAA,GAAO,GAAG,IAAK,EAAA,CAAA;AACrB,EAAA,MAAM,cAAc,OAAQ,CAAA,OAAA,CAAA;AAE5B,EAAA,OAAO,CAAe,YAAA,EAAA,QAAQ,CAAK,EAAA,EAAA,IAAI,IAAI,WAAW,CAAA,CAAA,CAAA,CAAA;AAC1D,CAAA;AANgB,MAAA,CAAA,mBAAA,EAAA,qBAAA,CAAA,CAAA","file":"utils.mjs","sourcesContent":["/**\n * @file Utility functions for handling HTTP responses and system information.\n */\n\nimport { IncomingMessage } from 'http';\nimport os from 'os';\n\n/**\n * Checks if the socket used for the response was reused.\n * \n * @param res - The HTTP response object.\n * @returns A boolean indicating if the socket was reused, or undefined if the information is not available.\n */\nexport function getReusedSocket(res: any): boolean | undefined {\n    return res?.reusedSocket;\n};\n\n/**\n * Retrieves the IP address of the server from the HTTP response.\n * \n * @param res - The HTTP response object.\n * @returns The server's IP address as a string, or undefined if the information is not available.\n */\nexport function getServerIp(res: IncomingMessage): string | undefined {\n    const socket = res?.socket || res?.connection;\n    return socket ? socket.remoteAddress : undefined;\n}\n\n/**\n * Generates a default User-Agent string based on the current system's platform, architecture, and Node.js version.\n * \n * @returns A string representing the default User-Agent.\n */\nexport function getDefaultUserAgent(): string {\n    const platform = os.platform();\n    const arch = os.arch();\n    const nodeVersion = process.version;\n\n    return `Nyro/0.0.1 (${platform}; ${arch} ${nodeVersion})`;\n}"]}