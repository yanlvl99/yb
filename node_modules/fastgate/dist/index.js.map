{"version":3,"sources":["../src/index.ts","../src/services/router.ts","../src/services/engine.ts"],"sourcesContent":["import ProxyManager from './services/engine';\nexport * from './services/types';\nexport default ProxyManager;","import nyro from 'nyro';\n\nexport default class ProxyRouter {\n  constructor() { };\n\n  /**\n   * @param url URL to send the request to\n   * @param method HTTP method to use\n   * @returns Promise<any>\n   * @description Send a request to a URL\n   */\n  public static async send(url: string, method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"PATCH\" | \"HEAD\" | \"OPTIONS\" | \"CONNECT\" | \"TRACE\") {\n    return new Promise((resolve, reject) => {\n    nyro({\n        url: url,\n        method: method,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept': '*/*'\n        },\n        timeout: 10000\n    }).then((response) => {\n        resolve(response.body);\n    }).catch((error) => {\n        reject(error);\n    })\n  })\n }\n \n}","import ProxyRouter from \"./router\";\nimport { \n    ProxyAPIOptions,\n    ProxyAPIResponse,\n    ProxyFetchOptions,\n    ProxyObject\n } from './types';\n\nvar cachedProxies: any[] = [];\nvar lastFetchTimestamp: number = 0;\n\nexport default class Engine {\n    constructor() {};\n\n    public static proxies: ProxyObject[] = cachedProxies;\n    \n    /**\n     * Get a list of proxies\n     * @param options Options for fetching the list\n     * @returns ProxyAPIResponse\n     * \n     * @example\n     * \n     * import fastgate from 'fastgate';\n     * \n     * fastgate.getProxyList({\n     *    country: ['US'],\n     *    protocol: ['http'],\n     *    anonymity: ['elite'],\n     *    timeout: 5000\n     * }).then((response) => {\n     *  console.log(response);\n     * })\n     * \n     */\n    public static async getProxyList(options?: ProxyAPIOptions): Promise<ProxyAPIResponse> {\n        if(!options) options = {};\n        if(!options.format) options.format = 'json';\n        if(!options.proxy_format) options.proxy_format = 'protocolipport';\n        if(!options.protocol) options.protocol = ['http', 'socks4', 'socks5'];\n\n        return new Promise((resolve, reject) => {\n         ProxyRouter.send(\n         `https://api.proxyscrape.com/v4/free-proxy-list/get?request=display_proxies${\n                options.country ? `&country=${options.country.join(',')}` : ''\n            }${\n                options.protocol ? `&protocol=${options.protocol.join(',')}` : ''\n            }${\n                options.proxy_format ? `&proxy_format=${options.proxy_format}` : ''\n            }${\n                options.format ? `&format=${options.format}` : ''\n            }${\n                options.anonymity ? `&anonymity=${options.anonymity.join(',')}` : ''\n            }${\n                options.timeout ? `&timeout=${options.timeout}` : ''\n            }`,\n         'GET'\n        ).then((response) => {\n            resolve(response as ProxyAPIResponse);\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n   };\n\n   /**\n    * Get a proxy from the list\n    * @param fetchOptions Options for fetching the proxy\n    * @returns ProxyObject\n    * \n    * @example \n    * \n    * import fastgate from 'fastgate';\n    * \n    * fastgate.getProxy({\n    *    force: false,\n    *   proxyOptions: {\n    *      alive: true,\n    *     timeout: (timeout) => {\n    *      return timeout < 5000;\n    *    },\n    *     ip: (ip) => {\n    *        return ip.startsWith('190');\n    *    }\n    * }).then((response) => {\n    *  console.log(response);\n    * })\n    * \n    */\n   public static async getProxy(fetchOptions?: ProxyFetchOptions): Promise<ProxyObject|undefined> {\n\n    if(!fetchOptions) fetchOptions = {};\n    if(fetchOptions?.force) cachedProxies = [];\n    if(\n        fetchOptions?.reload &&\n        fetchOptions?.reloadTimeout &&\n        Date.now() - lastFetchTimestamp > fetchOptions?.reloadTimeout\n     ) {\n        cachedProxies = [];\n     }\n     \n     const filteredCatchProxy = (): ProxyObject | undefined => {\n        const findedProxy: ProxyObject | undefined = cachedProxies.find((proxy) => {\n         \n            if (fetchOptions?.proxyOptions?.alive && !proxy?.alive) return false;\n            if (fetchOptions?.proxyOptions?.timeout && !fetchOptions.proxyOptions.timeout(proxy.timeout)) return false;\n            if (fetchOptions?.proxyOptions?.anonymity && !fetchOptions.proxyOptions.anonymity.includes(proxy.anonymity)) return false;\n            if (fetchOptions?.proxyOptions?.protocol && !fetchOptions.proxyOptions.protocol.includes(proxy.protocol)) return false;\n            if (fetchOptions?.proxyOptions?.ssl !== undefined && proxy?.ssl !== fetchOptions.proxyOptions.ssl) return false;\n            if (fetchOptions?.proxyOptions?.ip && !fetchOptions.proxyOptions.ip(proxy.ip)) return false;\n            if (fetchOptions?.proxyOptions?.port && !fetchOptions.proxyOptions.port(proxy.port)) return false;\n    \n            return true;\n        });\n    \n        return findedProxy;\n    };\n\n     const catchProxy = (): ProxyObject => {\n        if(cachedProxies.length === 0) {\n            throw new Error('No proxies found');\n        };\n        var randomNumber = Math.floor(Math.random() * cachedProxies.length);\n        var proxy = cachedProxies[randomNumber];\n        if(fetchOptions?.removeProxy) cachedProxies.splice(randomNumber, 1);\n        return proxy;\n     };\n\n     if(cachedProxies.length === 0) {\n     cachedProxies = await new Promise((resolve, reject) => {\n        this.getProxyList().then((response) => {\n            lastFetchTimestamp = Date.now();\n            if(!response.proxies) {\n                reject('No proxies found');\n                return;\n            }\n\n            resolve(response.proxies);\n        }).catch((error) => {\n            reject(error);\n        });\n    });\n\n    if(fetchOptions.proxyOptions) {\n        return filteredCatchProxy();\n    } else {\n        return catchProxy();\n    }\n    } else {\n    if(fetchOptions.proxyOptions) {\n        return filteredCatchProxy();\n    } else {\n        return catchProxy();\n    }\n    }\n\n   };\n\n\n}"],"mappings":"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","names":["nyro"]}